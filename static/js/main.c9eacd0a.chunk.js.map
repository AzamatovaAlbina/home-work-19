{"version":3,"sources":["components/BasicForm.jsx","App.jsx","index.js"],"names":["BasicForm","props","useState","name","lastName","email","value","setValue","isValid","setIsValid","changeHandler","e","target","prevState","stylesInputName","stylesInputLastName","stylesInputEmail","onSubmit","preventDefault","trim","length","console","log","includes","className","htmlFor","type","id","onChange","App","ReactDOM","render","document","getElementById"],"mappings":"8NAsGeA,EApGG,SAACC,GACjB,MAA0BC,mBAAS,CACjCC,KAAM,GACNC,SAAU,GACVC,MAAO,KACP,mBAJKC,EAAK,KAAEC,EAAQ,KAKtB,EAA8BL,mBAAS,CACrCC,MAAM,EACNC,UAAU,EACVC,OAAO,IACP,mBAJKG,EAAO,KAAEC,EAAU,KAKpBC,EAAgB,SAACC,GACrB,MAAwBA,EAAEC,OAAlBT,EAAI,EAAJA,KAAMG,EAAK,EAALA,MACdC,GAAS,SAACM,GAAS,kCAAWA,GAAS,kBAAGV,EAAOG,GAAK,GACxD,EAkBMQ,EAAkBN,EAAQL,KAC5B,eACA,uBACEY,EAAsBP,EAAQJ,SAChC,eACA,uBACEY,EAAmBR,EAAQH,MAC7B,eACA,uBAGJ,OACE,uBAAMY,SA7BkB,SAACN,GACzBA,EAAEO,iBACFT,EAAW,CAAEN,MAAM,EAAMC,UAAU,EAAMC,OAAO,IACf,IAA7BC,EAAMH,KAAKgB,OAAOC,SACpBX,EAAW,CAAEN,MAAM,IACnBkB,QAAQC,IAAI,cAEuB,IAAjChB,EAAMF,SAASe,OAAOC,SACxBX,EAAW,CAAEL,UAAU,IACvBiB,QAAQC,IAAI,aAEoB,IAA9BhB,EAAMD,MAAMc,OAAOC,QAAiBd,EAAMD,MAAMkB,SAAS,OAC3Dd,EAAW,CAAEJ,OAAO,IACpBgB,QAAQC,IAAI,SAGhB,EAaoC,UAChC,sBAAKE,UAAU,gBAAe,UAC5B,sBAAKA,UAAWV,EAAgB,UAC9B,uBAAOW,QAAQ,OAAM,wBACrB,uBACEC,KAAK,OACLC,GAAG,OACHxB,KAAK,OACLG,MAAOA,EAAMH,KACbyB,SAAUlB,KAGVF,EAAQL,MACR,mBAAGqB,UAAU,aAAY,2CAI5BH,QAAQC,IAAId,EAAQL,MACpBkB,QAAQC,IAAId,EAAQJ,UACpBiB,QAAQC,IAAId,EAAQH,OACrB,sBAAKmB,UAAWT,EAAoB,UAClC,uBAAOU,QAAQ,OAAM,uBACrB,uBACEC,KAAK,OACLC,GAAG,OACHxB,KAAK,WACLG,MAAOA,EAAMF,SACbwB,SAAUlB,IAEXF,EAAQJ,UACP,mBAAGoB,UAAU,aAAY,mDAI/B,sBAAKA,UAAWR,EAAiB,UAC/B,uBAAOS,QAAQ,OAAM,4BACrB,uBACEC,KAAK,OACLC,GAAG,OACHxB,KAAK,QACLG,MAAOA,EAAMD,MACbuB,SAAUlB,IAEXF,EAAQH,OACP,mBAAGmB,UAAU,aAAY,sEAK7B,qBAAKA,UAAU,eAAc,SAC3B,wBAAQE,KAAK,SAAQ,wBAI7B,ECxFeG,MATf,WACE,OACE,qBAAKL,UAAU,MAAK,SAElB,cAAC,EAAS,KAGhB,ECLAM,IAASC,OAAO,cAAC,EAAG,IAAKC,SAASC,eAAe,Q","file":"static/js/main.c9eacd0a.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst BasicForm = (props) => {\n  const [value, setValue] = useState({\n    name: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [isValid, setIsValid] = useState({\n    name: true,\n    lastName: true,\n    email: true,\n  });\n  const changeHandler = (e) => {\n    const { name, value } = e.target;\n    setValue((prevState) => ({ ...prevState, [name]: value }));\n  };\n  const submitFormHandler = (e) => {\n    e.preventDefault();\n    setIsValid({ name: true, lastName: true, email: true });\n    if (value.name.trim().length === 0) {\n      setIsValid({ name: false });\n      console.log(\"else name\");\n    }\n    if (value.lastName.trim().length === 0) {\n      setIsValid({ lastName: false });\n      console.log(\"lastname\");\n    }\n    if (value.email.trim().length === 0 || !value.email.includes(\"@\")) {\n      setIsValid({ email: false });\n      console.log(\"email\");\n    }\n   \n  };\n  const stylesInputName = isValid.name\n    ? \"form-control\"\n    : \"form-control invalid\";\n  const stylesInputLastName = isValid.lastName\n    ? \"form-control\"\n    : \"form-control invalid\";\n  const stylesInputEmail = isValid.email\n    ? \"form-control\"\n    : \"form-control invalid\";\n\n\n  return (\n    <form onSubmit={submitFormHandler}>\n      <div className=\"control-group\">\n        <div className={stylesInputName}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={value.name}\n            onChange={changeHandler}\n          />\n\n          {!isValid.name &&(\n            <p className=\"error-text\">Please, enter your name!!!</p>\n            )}\n          \n        </div>\n        {console.log(isValid.name)}\n        {console.log(isValid.lastName)}\n        {console.log(isValid.email)}\n        <div className={stylesInputLastName}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"lastName\"\n            value={value.lastName}\n            onChange={changeHandler}\n          />\n          {isValid.lastName || (\n            <p className=\"error-text\"> Please, enter your lastname!!!</p>\n          )}\n        </div>\n      </div>\n      <div className={stylesInputEmail}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"email\"\n          value={value.email}\n          onChange={changeHandler}\n        />\n        {isValid.email || (\n          <p className=\"error-text\">\n            Please, enter your email / email must comprise \"@\"!!!\n          </p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button type=\"submit\">Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n\n// import { useRef, useState } from \"react\";\n\n// const BasicForm = (props) => {\n//   const nameInputRef = useRef();\n//   const [nameIsValid, setNameIsValid] = useState(true);\n//   const [name, setName] = useState(\"\");\n//   const [isTouched, setIsToushed] = useState(true);\n//   const formSubmitHandler = (e) => {\n//     e.preventDefault();\n//   };\n\n//   const onBlurHandler = () => {\n//     const enteredName = nameInputRef.current.value;\n\n//     console.log(\"Losing focus\");\n\n//     setNameIsValid(true);\n\n//     setIsToushed(true);\n\n//     if (enteredName.trim().length < 5) {\n//       setNameIsValid(false);\n\n//       setIsToushed(false);\n\n//       return;\n//     }\n//   };\n\n//   const onChangeHandler = (e) => {\n//     setName(e.target.value);\n\n//     setNameIsValid(true);\n\n//     setIsToushed(true);\n\n//     const enteredName = nameInputRef.current.value;\n\n//     if (enteredName.trim().length < 5) {\n//       setNameIsValid(false);\n\n//       setIsToushed(false);\n\n//       return;\n//     }\n//   };\n\n//   const nameInputClasses = nameIsValid\n//     ? \"form=control\"\n//     : \"form-control invalid\";\n\n//   return (\n//     <form onSubmit={formSubmitHandler}>\n//       <div className=\"control-group\">\n//         <div className={nameInputClasses}>\n//           <label htmlFor=\"name\">First Name</label>\n//           <input\n//             type=\"text\"\n//             id=\"name\"\n//             ref={nameInputRef}\n//             onBlur={onBlurHandler}\n//             onChange={onChangeHandler}\n//           />\n//           {!nameIsValid && (\n//             <p className=\"error-text\">Name should be more 5 character</p>\n//           )}\n//         </div>\n//         <div className={nameInputClasses}>\n//           <label htmlFor=\"name\">Last Name</label>\n//           <input\n//             type=\"text\"\n//             id=\"name\"\n//             ref={nameInputRef}\n//             onBlur={onBlurHandler}\n//             onChange={onChangeHandler}\n//           />\n//           {!nameIsValid && (\n//             <p className=\"error-text\">Name should be more 5 character</p>\n//           )}\n//         </div>\n//       </div>\n//       <div className={nameInputClasses}>\n//         <label htmlFor=\"name\">E-Mail Address</label>\n//         <input\n//           type=\"text\"\n//           id=\"name\"\n//           ref={nameInputRef}\n//           onBlur={onBlurHandler}\n//           onChange={onChangeHandler}\n//         />\n//         {!nameIsValid && (\n//           <p className=\"error-text\">Name should be more 5 character</p>\n//         )}\n//       </div>\n//       <div className=\"form-actions\">\n//         <button disabled={!isTouched}>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default BasicForm;\n","import BasicForm from \"./components/BasicForm\";\n// import SimpleInput from \"./components/SimpleInput\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <SimpleInput /> */}\n      <BasicForm />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}